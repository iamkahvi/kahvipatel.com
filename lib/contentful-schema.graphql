type Query {
  asset(id: String!, preview: Boolean, locale: String): Asset
  assetCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: AssetFilter, order: [AssetOrder]): AssetCollection
  highlight(id: String!, preview: Boolean, locale: String): Highlight
  highlightCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: HighlightFilter, order: [HighlightOrder]): HighlightCollection
  bookListItem(id: String!, preview: Boolean, locale: String): BookListItem
  bookListItemCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: BookListItemFilter, order: [BookListItemOrder]): BookListItemCollection
  blogPost(id: String!, preview: Boolean, locale: String): BlogPost
  blogPostCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: BlogPostFilter, order: [BlogPostOrder]): BlogPostCollection
  bookShelf(id: String!, preview: Boolean, locale: String): BookShelf
  bookShelfCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: BookShelfFilter, order: [BookShelfOrder]): BookShelfCollection
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: EntryFilter, order: [EntryOrder]): EntryCollection
}

"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  title(locale: String): String
  description(locale: String): String
  contentType(locale: String): String
  fileName(locale: String): String
  size(locale: String): Int
  url(transform: ImageTransformOptions, locale: String): String
  width(locale: String): Int
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
}

type Sys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: DateTime
  firstPublishedAt: DateTime
  publishedVersion: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

input ImageTransformOptions {
  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat
}

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

enum ImageResizeStrategy {
  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """Creates a thumbnail from the image."""
  THUMB
}

enum ImageResizeFocus {
  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top right."""
  TOP_RIGHT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
  AVIF
}

type AssetLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

type EntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

interface Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
}

type AssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Asset]!
}

input AssetFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [AssetFilter]
  AND: [AssetFilter]
}

input SysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime]
  publishedAt_not_in: [DateTime]
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_not_in: [DateTime]
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  publishedVersion_exists: Boolean
  publishedVersion: Float
  publishedVersion_not: Float
  publishedVersion_in: [Float]
  publishedVersion_not_in: [Float]
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_lt: Float
  publishedVersion_lte: Float
}

input ContentfulMetadataFilter {
  tags_exists: Boolean
  tags: ContentfulMetadataTagsFilter
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_some: [String]
  id_contains_none: [String]
}

enum AssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Content type for the highlights from my book [See type definition](https://app.contentful.com/spaces/rbthbhshshw9/content_types/highlight)
"""
type Highlight implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): HighlightLinkingCollections
  book(preview: Boolean, locale: String, where: BookListItemFilter): BookListItem
  slug(locale: String): String
  body(locale: String): HighlightBody
}

type HighlightLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

"""
A Book Item [See type definition](https://app.contentful.com/spaces/rbthbhshshw9/content_types/bookListItem)
"""
type BookListItem implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): BookListItemLinkingCollections
  bookTitle(locale: String): String
  bookAuthor(locale: String): String
  dateFinished(locale: String): DateTime
  bookDescription(locale: String): BookListItemBookDescription
}

type BookListItemLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  highlightCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, order: [BookListItemLinkingCollectionsHighlightCollectionOrder]): HighlightCollection
  bookShelfCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, order: [BookListItemLinkingCollectionsBookShelfCollectionOrder]): BookShelfCollection
}

type HighlightCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Highlight]!
}

enum BookListItemLinkingCollectionsHighlightCollectionOrder {
  slug_ASC
  slug_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type BookShelfCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [BookShelf]!
}

"""
A Book Shelf [See type definition](https://app.contentful.com/spaces/rbthbhshshw9/content_types/bookShelf)
"""
type BookShelf implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): BookShelfLinkingCollections
  title(locale: String): String
  intro(locale: String): BookShelfIntro
  bookListCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: BookListItemFilter, order: [BookShelfBookListCollectionOrder]): BookShelfBookListCollection
}

type BookShelfLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

type BookShelfIntro {
  json: JSON!
  links: BookShelfIntroLinks!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type BookShelfIntroLinks {
  entries: BookShelfIntroEntries!
  assets: BookShelfIntroAssets!
  resources: BookShelfIntroResources!
}

type BookShelfIntroEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type BookShelfIntroAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type BookShelfIntroResources {
  block: [ResourceLink!]!
}

type ResourceLink {
  sys: ResourceSys!
}

type ResourceSys {
  type: String!
  urn: String!
  linkType: String!
}

type BookShelfBookListCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [BookListItem]!
}

input BookListItemFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  bookTitle_exists: Boolean
  bookTitle: String
  bookTitle_not: String
  bookTitle_in: [String]
  bookTitle_not_in: [String]
  bookTitle_contains: String
  bookTitle_not_contains: String
  bookAuthor_exists: Boolean
  bookAuthor: String
  bookAuthor_not: String
  bookAuthor_in: [String]
  bookAuthor_not_in: [String]
  bookAuthor_contains: String
  bookAuthor_not_contains: String
  dateFinished_exists: Boolean
  dateFinished: DateTime
  dateFinished_not: DateTime
  dateFinished_in: [DateTime]
  dateFinished_not_in: [DateTime]
  dateFinished_gt: DateTime
  dateFinished_gte: DateTime
  dateFinished_lt: DateTime
  dateFinished_lte: DateTime
  bookDescription_exists: Boolean
  bookDescription_contains: String
  bookDescription_not_contains: String
  OR: [BookListItemFilter]
  AND: [BookListItemFilter]
}

enum BookShelfBookListCollectionOrder {
  bookTitle_ASC
  bookTitle_DESC
  bookAuthor_ASC
  bookAuthor_DESC
  dateFinished_ASC
  dateFinished_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum BookListItemLinkingCollectionsBookShelfCollectionOrder {
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type BookListItemBookDescription {
  json: JSON!
  links: BookListItemBookDescriptionLinks!
}

type BookListItemBookDescriptionLinks {
  entries: BookListItemBookDescriptionEntries!
  assets: BookListItemBookDescriptionAssets!
  resources: BookListItemBookDescriptionResources!
}

type BookListItemBookDescriptionEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type BookListItemBookDescriptionAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type BookListItemBookDescriptionResources {
  block: [ResourceLink!]!
}

type HighlightBody {
  json: JSON!
  links: HighlightBodyLinks!
}

type HighlightBodyLinks {
  entries: HighlightBodyEntries!
  assets: HighlightBodyAssets!
  resources: HighlightBodyResources!
}

type HighlightBodyEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type HighlightBodyAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type HighlightBodyResources {
  block: [ResourceLink!]!
}

input HighlightFilter {
  book: cfBookListItemNestedFilter
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  book_exists: Boolean
  slug_exists: Boolean
  slug: String
  slug_not: String
  slug_in: [String]
  slug_not_in: [String]
  slug_contains: String
  slug_not_contains: String
  body_exists: Boolean
  body_contains: String
  body_not_contains: String
  OR: [HighlightFilter]
  AND: [HighlightFilter]
}

input cfBookListItemNestedFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  bookTitle_exists: Boolean
  bookTitle: String
  bookTitle_not: String
  bookTitle_in: [String]
  bookTitle_not_in: [String]
  bookTitle_contains: String
  bookTitle_not_contains: String
  bookAuthor_exists: Boolean
  bookAuthor: String
  bookAuthor_not: String
  bookAuthor_in: [String]
  bookAuthor_not_in: [String]
  bookAuthor_contains: String
  bookAuthor_not_contains: String
  dateFinished_exists: Boolean
  dateFinished: DateTime
  dateFinished_not: DateTime
  dateFinished_in: [DateTime]
  dateFinished_not_in: [DateTime]
  dateFinished_gt: DateTime
  dateFinished_gte: DateTime
  dateFinished_lt: DateTime
  dateFinished_lte: DateTime
  bookDescription_exists: Boolean
  bookDescription_contains: String
  bookDescription_not_contains: String
  OR: [cfBookListItemNestedFilter]
  AND: [cfBookListItemNestedFilter]
}

enum HighlightOrder {
  slug_ASC
  slug_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type BookListItemCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [BookListItem]!
}

enum BookListItemOrder {
  bookTitle_ASC
  bookTitle_DESC
  bookAuthor_ASC
  bookAuthor_DESC
  dateFinished_ASC
  dateFinished_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/rbthbhshshw9/content_types/blogPost)
"""
type BlogPost implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): BlogPostLinkingCollections
  postTitle(locale: String): String
  dateWritten(locale: String): DateTime
  postBody(locale: String): BlogPostPostBody
}

type BlogPostLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

type BlogPostPostBody {
  json: JSON!
  links: BlogPostPostBodyLinks!
}

type BlogPostPostBodyLinks {
  entries: BlogPostPostBodyEntries!
  assets: BlogPostPostBodyAssets!
  resources: BlogPostPostBodyResources!
}

type BlogPostPostBodyEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type BlogPostPostBodyAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type BlogPostPostBodyResources {
  block: [ResourceLink!]!
}

type BlogPostCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [BlogPost]!
}

input BlogPostFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  postTitle_exists: Boolean
  postTitle: String
  postTitle_not: String
  postTitle_in: [String]
  postTitle_not_in: [String]
  postTitle_contains: String
  postTitle_not_contains: String
  dateWritten_exists: Boolean
  dateWritten: DateTime
  dateWritten_not: DateTime
  dateWritten_in: [DateTime]
  dateWritten_not_in: [DateTime]
  dateWritten_gt: DateTime
  dateWritten_gte: DateTime
  dateWritten_lt: DateTime
  dateWritten_lte: DateTime
  postBody_exists: Boolean
  postBody_contains: String
  postBody_not_contains: String
  OR: [BlogPostFilter]
  AND: [BlogPostFilter]
}

enum BlogPostOrder {
  postTitle_ASC
  postTitle_DESC
  dateWritten_ASC
  dateWritten_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

input BookShelfFilter {
  bookList: cfBookListItemNestedFilter
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  intro_exists: Boolean
  intro_contains: String
  intro_not_contains: String
  bookListCollection_exists: Boolean
  OR: [BookShelfFilter]
  AND: [BookShelfFilter]
}

enum BookShelfOrder {
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

input EntryFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  OR: [EntryFilter]
  AND: [EntryFilter]
}

enum EntryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}
